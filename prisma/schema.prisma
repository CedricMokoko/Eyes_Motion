// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User{
  id Int @id @default(autoincrement())
  name String ? 
  surname String?
  email String @unique
  password String
  accounts Account[] //Relazione one-to-many con Account
  movieLikes MovieLike[] //Relazione one-to-many con MovieLike
  serieLikes SerieLike[] //Relazione one-to-many con MovieLike
}

model Account {
  id        Int       @id @default(autoincrement())
  provider  String    // Provider di autenticazione (es. google, github, credentials)
  providerAccountId String   // ID univoco fornito dal provider
  userId    Int       // Chiave esterna per collegare l'account a un utente
  createdAt DateTime  @default(now())
  refresh_token String?
  access_token  String?
  expires_at    DateTime?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?
  user User @relation(fields: [userId], references: [id])
  @@index([userId], name: "idx_userId")
  @@map("accounts") // Optional: Specify a custom name for the database table
  @@unique([provider, providerAccountId], name: "idx_provider_providerAccountId")
  @@unique([userId, provider], name: "idx_userId_provider")
  @@unique([userId, providerAccountId], name: "idx_userId_providerAccountId")
  @@unique([providerAccountId], name: "idx_providerAccountId")
}
model MovieLike{
  id Int @id @default(autoincrement())
  userId Int
  movieId String?

  user User? @relation(fields: [userId], references: [id])
}

model SerieLike{
  id Int @id @default(autoincrement())
  userId Int
  serieId String?
  user User? @relation(fields: [userId], references: [id])
}